// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package mini_assignment2.mini_assign_labh_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: mini_assign_labh Purpose: <br>
 * Description: <br>
 * 
 * @author labyadav@deloitte.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class mini_assign_labh implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (userName != null) {

				this.setProperty("userName", userName.toString());

			}

			if (password != null) {

				this.setProperty("password", password.toString());

			}

			if (host != null) {

				this.setProperty("host", host.toString());

			}

			if (port != null) {

				this.setProperty("port", port.toString());

			}

			if (dbName != null) {

				this.setProperty("dbName", dbName.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String userName;

		public String getUserName() {
			return this.userName;
		}

		public java.lang.String password;

		public java.lang.String getPassword() {
			return this.password;
		}

		public String host;

		public String getHost() {
			return this.host;
		}

		public Integer port;

		public Integer getPort() {
			return this.port;
		}

		public String dbName;

		public String getDbName() {
			return this.dbName;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "mini_assign_labh";
	private final String projectName = "MINI_ASSIGNMENT2";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					mini_assign_labh.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(mini_assign_labh.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError2", 0, "error");
			}

			errorCode = null;
			tDie_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_1_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_1_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_1_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String dbProperties_tDBConnection_1 = "";
				String url_tDBConnection_1 = "jdbc:postgresql://" + context.host + ":" + context.port + "/"
						+ context.dbName;

				if (dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
					url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
				}
				String dbUser_tDBConnection_1 = context.userName;

				final String decryptedPassword_tDBConnection_1 = context.password;
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 = java.sql.DriverManager.getDrivers();
				java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(
						java.util.Arrays.asList("com.amazon.redshift.jdbc.Driver", "com.amazon.redshift.jdbc41.Driver",
								"com.amazon.redshift.jdbc42.Driver"));
				while (drivers_tDBConnection_1.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
					if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
						try {
							java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
							java.sql.DriverManager.registerDriver(d_tDBConnection_1);
						} catch (java.lang.Exception e_tDBConnection_1) {
							globalMap.put("tDBConnection_1_ERROR_MESSAGE", e_tDBConnection_1.getMessage());
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tDBConnection_1", "");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				try {
					globalMap.put("tDie_1_DIE_PRIORITY", 5);
					System.err.println("Unable to connect with Database");

					globalMap.put("tDie_1_DIE_MESSAGE", "Unable to connect with Database");
					globalMap.put("tDie_1_DIE_MESSAGES", "Unable to connect with Database");

				} catch (Exception | Error e_tDie_1) {
					globalMap.put("tDie_1_ERROR_MESSAGE", e_tDie_1.getMessage());
					logIgnoredError(
							String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1),
							e_tDie_1);
				}

				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */

				/**
				 * [tDie_1 process_data_begin ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 process_data_begin ] stop
				 */

				/**
				 * [tDie_1 process_data_end ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 process_data_end ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public String Order_Priority;

		public String getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Long Order_ID;

		public Long getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Long Units_Sold;

		public Long getUnits_Sold() {
			return this.Units_Sold;
		}

		public Double Unit_Price;

		public Double getUnit_Price() {
			return this.Unit_Price;
		}

		public Double Unit_Cost;

		public Double getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + Order_Priority);
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public String Order_Priority;

		public String getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Long Order_ID;

		public Long getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Long Units_Sold;

		public Long getUnits_Sold() {
			return this.Units_Sold;
		}

		public Double Unit_Price;

		public Double getUnit_Price() {
			return this.Unit_Price;
		}

		public Double Unit_Cost;

		public Double getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + Order_Priority);
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public String Order_Priority;

		public String getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Long Order_ID;

		public Long getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Long Units_Sold;

		public Long getUnits_Sold() {
			return this.Units_Sold;
		}

		public Double Unit_Price;

		public Double getUnit_Price() {
			return this.Unit_Price;
		}

		public Double Unit_Cost;

		public Double getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + Order_Priority);
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public String Order_Priority;

		public String getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Long Order_ID;

		public Long getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Long Units_Sold;

		public Long getUnits_Sold() {
			return this.Units_Sold;
		}

		public Double Unit_Price;

		public Double getUnit_Price() {
			return this.Unit_Price;
		}

		public Double Unit_Cost;

		public Double getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + Order_Priority);
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class top3countriesStruct implements routines.system.IPersistableRow<top3countriesStruct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public String Order_Priority;

		public String getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Long Order_ID;

		public Long getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Long Units_Sold;

		public Long getUnits_Sold() {
			return this.Units_Sold;
		}

		public Double Unit_Price;

		public Double getUnit_Price() {
			return this.Unit_Price;
		}

		public Double Unit_Cost;

		public Double getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + Order_Priority);
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(top3countriesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public String Order_Priority;

		public String getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Long Order_ID;

		public Long getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Long Units_Sold;

		public Long getUnits_Sold() {
			return this.Units_Sold;
		}

		public Double Unit_Price;

		public Double getUnit_Price() {
			return this.Unit_Price;
		}

		public Double Unit_Cost;

		public Double getUnit_Cost() {
			return this.Unit_Cost;
		}

		public Double Total_Revenue;

		public Double getTotal_Revenue() {
			return this.Total_Revenue;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Total_Revenue = null;
					} else {
						this.Total_Revenue = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Total_Revenue = null;
					} else {
						this.Total_Revenue = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

				// Double

				if (this.Total_Revenue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Total_Revenue);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

				// Double

				if (this.Total_Revenue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Total_Revenue);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + Order_Priority);
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Total_Revenue=" + String.valueOf(Total_Revenue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class finalTableStruct implements routines.system.IPersistableRow<finalTableStruct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public String Order_Priority;

		public String getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Long Order_ID;

		public Long getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Long Units_Sold;

		public Long getUnits_Sold() {
			return this.Units_Sold;
		}

		public Double Unit_Price;

		public Double getUnit_Price() {
			return this.Unit_Price;
		}

		public Double Unit_Cost;

		public Double getUnit_Cost() {
			return this.Unit_Cost;
		}

		public Double Total_Revenue;

		public Double getTotal_Revenue() {
			return this.Total_Revenue;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Total_Revenue = null;
					} else {
						this.Total_Revenue = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Total_Revenue = null;
					} else {
						this.Total_Revenue = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

				// Double

				if (this.Total_Revenue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Total_Revenue);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

				// Double

				if (this.Total_Revenue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Total_Revenue);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + Order_Priority);
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Total_Revenue=" + String.valueOf(Total_Revenue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(finalTableStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class orderedinRangeStruct implements routines.system.IPersistableRow<orderedinRangeStruct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public String Order_Priority;

		public String getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Long Order_ID;

		public Long getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Long Units_Sold;

		public Long getUnits_Sold() {
			return this.Units_Sold;
		}

		public Double Unit_Price;

		public Double getUnit_Price() {
			return this.Unit_Price;
		}

		public Double Unit_Cost;

		public Double getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + Order_Priority);
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(orderedinRangeStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public String Order_Priority;

		public String getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Long Order_ID;

		public Long getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Long Units_Sold;

		public Long getUnits_Sold() {
			return this.Units_Sold;
		}

		public Double Unit_Price;

		public Double getUnit_Price() {
			return this.Unit_Price;
		}

		public Double Unit_Cost;

		public Double getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + Order_Priority);
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public String Order_Priority;

		public String getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Long Order_ID;

		public Long getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Long Units_Sold;

		public Long getUnits_Sold() {
			return this.Units_Sold;
		}

		public Double Unit_Price;

		public Double getUnit_Price() {
			return this.Unit_Price;
		}

		public Double Unit_Cost;

		public Double getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + Order_Priority);
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public String Order_Priority;

		public String getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Long Order_ID;

		public Long getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Long Units_Sold;

		public Long getUnits_Sold() {
			return this.Units_Sold;
		}

		public Double Unit_Price;

		public Double getUnit_Price() {
			return this.Unit_Price;
		}

		public Double Unit_Cost;

		public Double getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + Order_Priority);
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public String Order_Priority;

		public String getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Long Order_ID;

		public Long getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Long Units_Sold;

		public Long getUnits_Sold() {
			return this.Units_Sold;
		}

		public Double Unit_Price;

		public Double getUnit_Price() {
			return this.Unit_Price;
		}

		public Double Unit_Cost;

		public Double getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + Order_Priority);
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public String Order_Priority;

		public String getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Long Order_ID;

		public Long getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Long Units_Sold;

		public Long getUnits_Sold() {
			return this.Units_Sold;
		}

		public Double Unit_Price;

		public Double getUnit_Price() {
			return this.Unit_Price;
		}

		public Double Unit_Cost;

		public Double getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + Order_Priority);
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public String Order_Priority;

		public String getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Long Order_ID;

		public Long getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Long Units_Sold;

		public Long getUnits_Sold() {
			return this.Units_Sold;
		}

		public Double Unit_Price;

		public Double getUnit_Price() {
			return this.Unit_Price;
		}

		public Double Unit_Cost;

		public Double getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + Order_Priority);
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public String Order_Priority;

		public String getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Long Order_ID;

		public Long getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Long Units_Sold;

		public Long getUnits_Sold() {
			return this.Units_Sold;
		}

		public Double Unit_Price;

		public Double getUnit_Price() {
			return this.Unit_Price;
		}

		public Double Unit_Cost;

		public Double getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + Order_Priority);
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public String Order_Priority;

		public String getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Long Order_ID;

		public Long getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Long Units_Sold;

		public Long getUnits_Sold() {
			return this.Units_Sold;
		}

		public Double Unit_Price;

		public Double getUnit_Price() {
			return this.Unit_Price;
		}

		public Double Unit_Cost;

		public Double getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + Order_Priority);
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];
		static byte[] commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public String Order_Priority;

		public String getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Long Order_ID;

		public Long getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Long Units_Sold;

		public Long getUnits_Sold() {
			return this.Units_Sold;
		}

		public Double Unit_Price;

		public Double getUnit_Price() {
			return this.Unit_Price;
		}

		public Double Unit_Cost;

		public Double getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length) {
					if (length < 1024 && commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh.length == 0) {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[1024];
					} else {
						commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length);
				strReturn = new String(commonByteArray_MINI_ASSIGNMENT2_mini_assign_labh, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MINI_ASSIGNMENT2_mini_assign_labh) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					this.Order_Priority = readString(dis);

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readLong();
					}

					this.Ship_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Units_Sold = null;
					} else {
						this.Units_Sold = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// String

				writeString(this.Order_Priority, dos);

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Long

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Order_ID);
				}

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Long

				if (this.Units_Sold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Units_Sold);
				}

				// Double

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Price);
				}

				// Double

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + Order_Priority);
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();
				row9Struct row9 = new row9Struct();
				row5Struct row5 = new row5Struct();
				row10Struct row10 = new row10Struct();
				row12Struct row12 = new row12Struct();
				row6Struct row6 = new row6Struct();
				orderedinRangeStruct orderedinRange = new orderedinRangeStruct();
				row8Struct row8 = new row8Struct();
				finalTableStruct finalTable = new finalTableStruct();
				row11Struct row11 = new row11Struct();
				row7Struct row7 = new row7Struct();
				top3countriesStruct top3countries = new top3countriesStruct();
				row13Struct row13 = new row13Struct();
				row14Struct row14 = new row14Struct();

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						"C:/Users/labyadav/Desktop/HU IE/Week4/Assignment2/output1.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
							fileName_tFileOutputDelimited_4.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
																		 * Start field
																		 * tFileOutputDelimited_4:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}
				outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_4.length() == 0) {
					outtFileOutputDelimited_4.write("Region");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Country");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Item_Type");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Sales_Channel");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Order_Priority");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Order_Date");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Order_ID");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Ship_Date");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Units_Sold");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Unit_Price");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Unit_Cost");
					outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"C:/Users/labyadav/Desktop/HU IE/Week4/Assignment2/output2.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_3.length() == 0) {
					outtFileOutputDelimited_3.write("Region");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Country");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Item_Type");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Sales_Channel");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Order_Priority");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Order_Date");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Order_ID");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Ship_Date");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Units_Sold");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Unit_Price");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Unit_Cost");
					outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tFilterRow_3 begin ] start
				 */

				ok_Hash.put("tFilterRow_3", false);
				start_Hash.put("tFilterRow_3", System.currentTimeMillis());

				currentComponent = "tFilterRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tFilterRow_3 = 0;

				int nb_line_tFilterRow_3 = 0;
				int nb_line_ok_tFilterRow_3 = 0;
				int nb_line_reject_tFilterRow_3 = 0;

				class Operator_tFilterRow_3 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_3(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_3 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "orderedinRange");
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"C:/Users/labyadav/Desktop/HU IE/Week4/Assignment2/output3.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																		 * Start field
																		 * tFileOutputDelimited_2:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_2.length() == 0) {
					outtFileOutputDelimited_2.write("Region");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Country");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Item_Type");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Sales_Channel");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Order_Priority");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Order_Date");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Order_ID");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Ship_Date");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Units_Sold");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Unit_Price");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Unit_Cost");
					outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				orderedinRangeStruct orderedinRange_tmp = new orderedinRangeStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(
						"C:/Users/labyadav/Desktop/HU IE/Week4/Assignment2/output5.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
							fileName_tFileOutputDelimited_5.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);
				int nb_line_tFileOutputDelimited_5 = 0;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				final String OUT_DELIM_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_5:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /**
																		 * Start field
																		 * tFileOutputDelimited_5:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						dir_tFileOutputDelimited_5.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_5 = null;

				java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				if (fileToDelete_tFileOutputDelimited_5.exists()) {
					fileToDelete_tFileOutputDelimited_5.delete();
				}
				outtFileOutputDelimited_5 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_5, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_5.length() == 0) {
					outtFileOutputDelimited_5.write("Region");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Country");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Item_Type");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Sales_Channel");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Order_Priority");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Order_Date");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Order_ID");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Ship_Date");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Units_Sold");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Unit_Price");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Unit_Cost");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Total_Revenue");
					outtFileOutputDelimited_5.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_5", outtFileOutputDelimited_5);
				resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

				/**
				 * [tFileOutputDelimited_5 begin ] stop
				 */

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "finalTable");
				}

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = ("etlRevSales");
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("etlRevSales");
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rowsToCommitCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;

				conn_tDBOutput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;
				java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
				boolean whetherExist_tDBOutput_2 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables(null, null, null,
						new String[] { "TABLE" })) {
					String defaultSchema_tDBOutput_2 = "public";
					if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tDBOutput_2 = conn_tDBOutput_2.createStatement();
								java.sql.ResultSet rsSchema_tDBOutput_2 = stmtSchema_tDBOutput_2
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tDBOutput_2.next()) {
								defaultSchema_tDBOutput_2 = rsSchema_tDBOutput_2.getString("current_schema");
							}
						}
					}
					while (rsTable_tDBOutput_2.next()) {
						String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
						String schema_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_SCHEM");
						if (table_tDBOutput_2.equals(("etlRevSales"))
								&& (schema_tDBOutput_2.equals(dbschema_tDBOutput_2)
										|| ((dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0)
												&& defaultSchema_tDBOutput_2.equals(schema_tDBOutput_2)))) {
							whetherExist_tDBOutput_2 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_2) {
					try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
						stmtDrop_tDBOutput_2.execute("DROP TABLE \"" + tableName_tDBOutput_2 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtCreate_tDBOutput_2.execute("CREATE TABLE \"" + tableName_tDBOutput_2
							+ "\"(\"Region\" VARCHAR(50)  ,\"Country\" VARCHAR(40)  ,\"Item_Type\" VARCHAR(18)  ,\"Sales_Channel\" VARCHAR(8)  ,\"Order_Priority\" BPCHAR ,\"Order_Date\" DATE ,\"Order_ID\" INT8 ,\"Ship_Date\" DATE ,\"Units_Sold\" INT8 ,\"Unit_Price\" FLOAT8 ,\"Unit_Cost\" FLOAT8 ,\"Total_Revenue\" FLOAT8 )");
				}
				String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2
						+ "\" (\"Region\",\"Country\",\"Item_Type\",\"Sales_Channel\",\"Order_Priority\",\"Order_Date\",\"Order_ID\",\"Ship_Date\",\"Units_Sold\",\"Unit_Price\",\"Unit_Cost\",\"Total_Revenue\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				finalTableStruct finalTable_tmp = new finalTableStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "top3countries");
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Country;
					Long Units_Sold_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.Country == null) ? 0 : this.Country.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.Country == null) {
							if (other.Country != null)
								return false;
						} else if (!this.Country.equals(other.Country))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				top3countriesStruct top3countries_tmp = new top3countriesStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  \"TalendSales\".\"Region\", \n  \"TalendSales\".\"Country\", \n  \"TalendSales\".\"Item_Type\", \n  \"TalendSale"
						+ "s\".\"Sales_Channel\", \n  \"TalendSales\".\"Order_Priority\", \n  \"TalendSales\".\"Order_Date\", \n  \"TalendSales\".\"Or"
						+ "der_ID\", \n  \"TalendSales\".\"Ship_Date\", \n  \"TalendSales\".\"Units_Sold\", \n  \"TalendSales\".\"Unit_Price\", \n  \"T"
						+ "alendSales\".\"Unit_Cost\"\nFROM \"TalendSales\"";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row3.Region = null;
						} else {

							row3.Region = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row3.Country = null;
						} else {

							row3.Country = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row3.Item_Type = null;
						} else {

							row3.Item_Type = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row3.Sales_Channel = null;
						} else {

							row3.Sales_Channel = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row3.Order_Priority = null;
						} else {

							row3.Order_Priority = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row3.Order_Date = null;
						} else {

							row3.Order_Date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 6);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row3.Order_ID = null;
						} else {

							row3.Order_ID = rs_tDBInput_1.getLong(7);
							if (rs_tDBInput_1.wasNull()) {
								row3.Order_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row3.Ship_Date = null;
						} else {

							row3.Ship_Date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 8);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row3.Units_Sold = null;
						} else {

							row3.Units_Sold = rs_tDBInput_1.getLong(9);
							if (rs_tDBInput_1.wasNull()) {
								row3.Units_Sold = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row3.Unit_Price = null;
						} else {

							row3.Unit_Price = rs_tDBInput_1.getDouble(10);
							if (rs_tDBInput_1.wasNull()) {
								row3.Unit_Price = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row3.Unit_Cost = null;
						} else {

							row3.Unit_Cost = rs_tDBInput_1.getDouble(11);
							if (rs_tDBInput_1.wasNull()) {
								row3.Unit_Cost = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tReplicate_1 main ] start
						 */

						currentComponent = "tReplicate_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row3"

							);
						}

						row4 = new row4Struct();

						row4.Region = row3.Region;
						row4.Country = row3.Country;
						row4.Item_Type = row3.Item_Type;
						row4.Sales_Channel = row3.Sales_Channel;
						row4.Order_Priority = row3.Order_Priority;
						row4.Order_Date = row3.Order_Date;
						row4.Order_ID = row3.Order_ID;
						row4.Ship_Date = row3.Ship_Date;
						row4.Units_Sold = row3.Units_Sold;
						row4.Unit_Price = row3.Unit_Price;
						row4.Unit_Cost = row3.Unit_Cost;
						row5 = new row5Struct();

						row5.Region = row3.Region;
						row5.Country = row3.Country;
						row5.Item_Type = row3.Item_Type;
						row5.Sales_Channel = row3.Sales_Channel;
						row5.Order_Priority = row3.Order_Priority;
						row5.Order_Date = row3.Order_Date;
						row5.Order_ID = row3.Order_ID;
						row5.Ship_Date = row3.Ship_Date;
						row5.Units_Sold = row3.Units_Sold;
						row5.Unit_Price = row3.Unit_Price;
						row5.Unit_Cost = row3.Unit_Cost;
						row6 = new row6Struct();

						row6.Region = row3.Region;
						row6.Country = row3.Country;
						row6.Item_Type = row3.Item_Type;
						row6.Sales_Channel = row3.Sales_Channel;
						row6.Order_Priority = row3.Order_Priority;
						row6.Order_Date = row3.Order_Date;
						row6.Order_ID = row3.Order_ID;
						row6.Ship_Date = row3.Ship_Date;
						row6.Units_Sold = row3.Units_Sold;
						row6.Unit_Price = row3.Unit_Price;
						row6.Unit_Cost = row3.Unit_Cost;
						row8 = new row8Struct();

						row8.Region = row3.Region;
						row8.Country = row3.Country;
						row8.Item_Type = row3.Item_Type;
						row8.Sales_Channel = row3.Sales_Channel;
						row8.Order_Priority = row3.Order_Priority;
						row8.Order_Date = row3.Order_Date;
						row8.Order_ID = row3.Order_ID;
						row8.Ship_Date = row3.Ship_Date;
						row8.Units_Sold = row3.Units_Sold;
						row8.Unit_Price = row3.Unit_Price;
						row8.Unit_Cost = row3.Unit_Cost;
						row7 = new row7Struct();

						row7.Region = row3.Region;
						row7.Country = row3.Country;
						row7.Item_Type = row3.Item_Type;
						row7.Sales_Channel = row3.Sales_Channel;
						row7.Order_Priority = row3.Order_Priority;
						row7.Order_Date = row3.Order_Date;
						row7.Order_ID = row3.Order_ID;
						row7.Ship_Date = row3.Ship_Date;
						row7.Units_Sold = row3.Units_Sold;
						row7.Unit_Price = row3.Unit_Price;
						row7.Unit_Cost = row3.Unit_Cost;

						tos_count_tReplicate_1++;

						/**
						 * [tReplicate_1 main ] stop
						 */

						/**
						 * [tReplicate_1 process_data_begin ] start
						 */

						currentComponent = "tReplicate_1";

						/**
						 * [tReplicate_1 process_data_begin ] stop
						 */

						/**
						 * [tFilterRow_1 main ] start
						 */

						currentComponent = "tFilterRow_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row4"

							);
						}

						row9 = null;
						Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
						ope_tFilterRow_1.matches((row4.Region == null ? false : row4.Region.compareTo("Europe") == 0),
								"Region.compareTo(\"Europe\") == 0 failed");

						if (ope_tFilterRow_1.getMatchFlag()) {
							if (row9 == null) {
								row9 = new row9Struct();
							}
							row9.Region = row4.Region;
							row9.Country = row4.Country;
							row9.Item_Type = row4.Item_Type;
							row9.Sales_Channel = row4.Sales_Channel;
							row9.Order_Priority = row4.Order_Priority;
							row9.Order_Date = row4.Order_Date;
							row9.Order_ID = row4.Order_ID;
							row9.Ship_Date = row4.Ship_Date;
							row9.Units_Sold = row4.Units_Sold;
							row9.Unit_Price = row4.Unit_Price;
							row9.Unit_Cost = row4.Unit_Cost;
							nb_line_ok_tFilterRow_1++;
						} else {
							nb_line_reject_tFilterRow_1++;
						}

						nb_line_tFilterRow_1++;

						tos_count_tFilterRow_1++;

						/**
						 * [tFilterRow_1 main ] stop
						 */

						/**
						 * [tFilterRow_1 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_1";

						/**
						 * [tFilterRow_1 process_data_begin ] stop
						 */
// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tFileOutputDelimited_4 main ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row9"

								);
							}

							StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
							if (row9.Region != null) {
								sb_tFileOutputDelimited_4.append(row9.Region);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row9.Country != null) {
								sb_tFileOutputDelimited_4.append(row9.Country);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row9.Item_Type != null) {
								sb_tFileOutputDelimited_4.append(row9.Item_Type);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row9.Sales_Channel != null) {
								sb_tFileOutputDelimited_4.append(row9.Sales_Channel);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row9.Order_Priority != null) {
								sb_tFileOutputDelimited_4.append(row9.Order_Priority);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row9.Order_Date != null) {
								sb_tFileOutputDelimited_4
										.append(FormatterUtils.format_Date(row9.Order_Date, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row9.Order_ID != null) {
								sb_tFileOutputDelimited_4.append(row9.Order_ID);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row9.Ship_Date != null) {
								sb_tFileOutputDelimited_4
										.append(FormatterUtils.format_Date(row9.Ship_Date, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row9.Units_Sold != null) {
								sb_tFileOutputDelimited_4.append(row9.Units_Sold);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row9.Unit_Price != null) {
								sb_tFileOutputDelimited_4.append(row9.Unit_Price);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row9.Unit_Cost != null) {
								sb_tFileOutputDelimited_4.append(row9.Unit_Cost);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

							nb_line_tFileOutputDelimited_4++;
							resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

							outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());

							tos_count_tFileOutputDelimited_4++;

							/**
							 * [tFileOutputDelimited_4 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_4 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

							/**
							 * [tFileOutputDelimited_4 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_4 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

							/**
							 * [tFileOutputDelimited_4 process_data_end ] stop
							 */

						} // End of branch "row9"

						/**
						 * [tFilterRow_1 process_data_end ] start
						 */

						currentComponent = "tFilterRow_1";

						/**
						 * [tFilterRow_1 process_data_end ] stop
						 */

						/**
						 * [tFilterRow_2 main ] start
						 */

						currentComponent = "tFilterRow_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row5"

							);
						}

						row10 = null;
						Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("||");
						ope_tFilterRow_2.matches((row5.Country == null ? false : row5.Country.compareTo("India") == 0),
								"Country.compareTo(\"India\") == 0 failed");
						ope_tFilterRow_2.matches(
								(row5.Country == null ? false : row5.Country.compareTo("Sri Lanka") == 0),
								"Country.compareTo(\"Sri Lanka\") == 0 failed");
						ope_tFilterRow_2.matches(
								(row5.Country == null ? false : row5.Country.compareTo("Indonesia") == 0),
								"Country.compareTo(\"Indonesia\") == 0 failed");

						if (ope_tFilterRow_2.getMatchFlag()) {
							if (row10 == null) {
								row10 = new row10Struct();
							}
							row10.Region = row5.Region;
							row10.Country = row5.Country;
							row10.Item_Type = row5.Item_Type;
							row10.Sales_Channel = row5.Sales_Channel;
							row10.Order_Priority = row5.Order_Priority;
							row10.Order_Date = row5.Order_Date;
							row10.Order_ID = row5.Order_ID;
							row10.Ship_Date = row5.Ship_Date;
							row10.Units_Sold = row5.Units_Sold;
							row10.Unit_Price = row5.Unit_Price;
							row10.Unit_Cost = row5.Unit_Cost;
							nb_line_ok_tFilterRow_2++;
						} else {
							nb_line_reject_tFilterRow_2++;
						}

						nb_line_tFilterRow_2++;

						tos_count_tFilterRow_2++;

						/**
						 * [tFilterRow_2 main ] stop
						 */

						/**
						 * [tFilterRow_2 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_2";

						/**
						 * [tFilterRow_2 process_data_begin ] stop
						 */
// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tFilterRow_3 main ] start
							 */

							currentComponent = "tFilterRow_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row10"

								);
							}

							row12 = null;
							Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("||");
							ope_tFilterRow_3.matches(
									(row10.Order_Priority == null ? false : row10.Order_Priority.compareTo("H") == 0),
									"Order_Priority.compareTo(\"H\") == 0 failed");
							ope_tFilterRow_3.matches(
									(row10.Order_Priority == null ? false : row10.Order_Priority.compareTo("M") == 0),
									"Order_Priority.compareTo(\"M\") == 0 failed");

							if (ope_tFilterRow_3.getMatchFlag()) {
								if (row12 == null) {
									row12 = new row12Struct();
								}
								row12.Region = row10.Region;
								row12.Country = row10.Country;
								row12.Item_Type = row10.Item_Type;
								row12.Sales_Channel = row10.Sales_Channel;
								row12.Order_Priority = row10.Order_Priority;
								row12.Order_Date = row10.Order_Date;
								row12.Order_ID = row10.Order_ID;
								row12.Ship_Date = row10.Ship_Date;
								row12.Units_Sold = row10.Units_Sold;
								row12.Unit_Price = row10.Unit_Price;
								row12.Unit_Cost = row10.Unit_Cost;
								nb_line_ok_tFilterRow_3++;
							} else {
								nb_line_reject_tFilterRow_3++;
							}

							nb_line_tFilterRow_3++;

							tos_count_tFilterRow_3++;

							/**
							 * [tFilterRow_3 main ] stop
							 */

							/**
							 * [tFilterRow_3 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_3";

							/**
							 * [tFilterRow_3 process_data_begin ] stop
							 */
// Start of branch "row12"
							if (row12 != null) {

								/**
								 * [tFileOutputDelimited_3 main ] start
								 */

								currentComponent = "tFileOutputDelimited_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row12"

									);
								}

								StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
								if (row12.Region != null) {
									sb_tFileOutputDelimited_3.append(row12.Region);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row12.Country != null) {
									sb_tFileOutputDelimited_3.append(row12.Country);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row12.Item_Type != null) {
									sb_tFileOutputDelimited_3.append(row12.Item_Type);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row12.Sales_Channel != null) {
									sb_tFileOutputDelimited_3.append(row12.Sales_Channel);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row12.Order_Priority != null) {
									sb_tFileOutputDelimited_3.append(row12.Order_Priority);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row12.Order_Date != null) {
									sb_tFileOutputDelimited_3
											.append(FormatterUtils.format_Date(row12.Order_Date, "dd-MM-yyyy"));
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row12.Order_ID != null) {
									sb_tFileOutputDelimited_3.append(row12.Order_ID);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row12.Ship_Date != null) {
									sb_tFileOutputDelimited_3
											.append(FormatterUtils.format_Date(row12.Ship_Date, "dd-MM-yyyy"));
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row12.Units_Sold != null) {
									sb_tFileOutputDelimited_3.append(row12.Units_Sold);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row12.Unit_Price != null) {
									sb_tFileOutputDelimited_3.append(row12.Unit_Price);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row12.Unit_Cost != null) {
									sb_tFileOutputDelimited_3.append(row12.Unit_Cost);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

								nb_line_tFileOutputDelimited_3++;
								resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

								outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

								tos_count_tFileOutputDelimited_3++;

								/**
								 * [tFileOutputDelimited_3 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_3 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_3";

								/**
								 * [tFileOutputDelimited_3 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_3 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_3";

								/**
								 * [tFileOutputDelimited_3 process_data_end ] stop
								 */

							} // End of branch "row12"

							/**
							 * [tFilterRow_3 process_data_end ] start
							 */

							currentComponent = "tFilterRow_3";

							/**
							 * [tFilterRow_3 process_data_end ] stop
							 */

						} // End of branch "row10"

						/**
						 * [tFilterRow_2 process_data_end ] start
						 */

						currentComponent = "tFilterRow_2";

						/**
						 * [tFilterRow_2 process_data_end ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row6"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							orderedinRange = null;

// # Output table : 'orderedinRange'
// # Filter conditions 
							if (

							row6.Order_Date.after(TalendDate.parseDate("dd/MM/yyyy", "01/05/2015"))
									&& row6.Order_Date.before(TalendDate.parseDate("dd/MM/yyyy", "01/12/2019"))

							) {
								orderedinRange_tmp.Region = row6.Region;
								orderedinRange_tmp.Country = row6.Country;
								orderedinRange_tmp.Item_Type = row6.Item_Type;
								orderedinRange_tmp.Sales_Channel = row6.Sales_Channel;
								orderedinRange_tmp.Order_Priority = row6.Order_Priority;
								orderedinRange_tmp.Order_Date = row6.Order_Date;
								orderedinRange_tmp.Order_ID = row6.Order_ID;
								orderedinRange_tmp.Ship_Date = row6.Ship_Date;
								orderedinRange_tmp.Units_Sold = row6.Units_Sold;
								orderedinRange_tmp.Unit_Price = row6.Unit_Price;
								orderedinRange_tmp.Unit_Cost = row6.Unit_Cost;
								orderedinRange = orderedinRange_tmp;
							} // closing filter/reject
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
// Start of branch "orderedinRange"
						if (orderedinRange != null) {

							/**
							 * [tFileOutputDelimited_2 main ] start
							 */

							currentComponent = "tFileOutputDelimited_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "orderedinRange"

								);
							}

							StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
							if (orderedinRange.Region != null) {
								sb_tFileOutputDelimited_2.append(orderedinRange.Region);
							}
							sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
							if (orderedinRange.Country != null) {
								sb_tFileOutputDelimited_2.append(orderedinRange.Country);
							}
							sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
							if (orderedinRange.Item_Type != null) {
								sb_tFileOutputDelimited_2.append(orderedinRange.Item_Type);
							}
							sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
							if (orderedinRange.Sales_Channel != null) {
								sb_tFileOutputDelimited_2.append(orderedinRange.Sales_Channel);
							}
							sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
							if (orderedinRange.Order_Priority != null) {
								sb_tFileOutputDelimited_2.append(orderedinRange.Order_Priority);
							}
							sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
							if (orderedinRange.Order_Date != null) {
								sb_tFileOutputDelimited_2
										.append(FormatterUtils.format_Date(orderedinRange.Order_Date, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
							if (orderedinRange.Order_ID != null) {
								sb_tFileOutputDelimited_2.append(orderedinRange.Order_ID);
							}
							sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
							if (orderedinRange.Ship_Date != null) {
								sb_tFileOutputDelimited_2
										.append(FormatterUtils.format_Date(orderedinRange.Ship_Date, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
							if (orderedinRange.Units_Sold != null) {
								sb_tFileOutputDelimited_2.append(orderedinRange.Units_Sold);
							}
							sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
							if (orderedinRange.Unit_Price != null) {
								sb_tFileOutputDelimited_2.append(orderedinRange.Unit_Price);
							}
							sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
							if (orderedinRange.Unit_Cost != null) {
								sb_tFileOutputDelimited_2.append(orderedinRange.Unit_Cost);
							}
							sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

							nb_line_tFileOutputDelimited_2++;
							resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

							outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

							tos_count_tFileOutputDelimited_2++;

							/**
							 * [tFileOutputDelimited_2 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_2 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_2";

							/**
							 * [tFileOutputDelimited_2 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_2 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_2";

							/**
							 * [tFileOutputDelimited_2 process_data_end ] stop
							 */

						} // End of branch "orderedinRange"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row8"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
							// ###############################
							// # Output tables

							finalTable = null;

// # Output table : 'finalTable'
							finalTable_tmp.Region = row8.Region;
							finalTable_tmp.Country = row8.Country;
							finalTable_tmp.Item_Type = row8.Item_Type;
							finalTable_tmp.Sales_Channel = row8.Sales_Channel;
							finalTable_tmp.Order_Priority = row8.Order_Priority;
							finalTable_tmp.Order_Date = row8.Order_Date;
							finalTable_tmp.Order_ID = row8.Order_ID;
							finalTable_tmp.Ship_Date = row8.Ship_Date;
							finalTable_tmp.Units_Sold = row8.Units_Sold;
							finalTable_tmp.Unit_Price = row8.Unit_Price;
							finalTable_tmp.Unit_Cost = row8.Unit_Cost;
							finalTable_tmp.Total_Revenue = row8.Units_Sold * row8.Unit_Price;
							finalTable = finalTable_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4 = false;

						tos_count_tMap_4++;

						/**
						 * [tMap_4 main ] stop
						 */

						/**
						 * [tMap_4 process_data_begin ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_begin ] stop
						 */
// Start of branch "finalTable"
						if (finalTable != null) {

							/**
							 * [tDBOutput_2 main ] start
							 */

							currentComponent = "tDBOutput_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "finalTable"

								);
							}

							row11 = null;
							whetherReject_tDBOutput_2 = false;
							if (finalTable.Region == null) {
								pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(1, finalTable.Region);
							}

							if (finalTable.Country == null) {
								pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(2, finalTable.Country);
							}

							if (finalTable.Item_Type == null) {
								pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(3, finalTable.Item_Type);
							}

							if (finalTable.Sales_Channel == null) {
								pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(4, finalTable.Sales_Channel);
							}

							if (finalTable.Order_Priority == null) {
								pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(5, finalTable.Order_Priority);
							}

							if (finalTable.Order_Date != null) {
								pstmt_tDBOutput_2.setTimestamp(6,
										new java.sql.Timestamp(finalTable.Order_Date.getTime()));
							} else {
								pstmt_tDBOutput_2.setNull(6, java.sql.Types.TIMESTAMP);
							}

							if (finalTable.Order_ID == null) {
								pstmt_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_2.setLong(7, finalTable.Order_ID);
							}

							if (finalTable.Ship_Date != null) {
								pstmt_tDBOutput_2.setTimestamp(8,
										new java.sql.Timestamp(finalTable.Ship_Date.getTime()));
							} else {
								pstmt_tDBOutput_2.setNull(8, java.sql.Types.TIMESTAMP);
							}

							if (finalTable.Units_Sold == null) {
								pstmt_tDBOutput_2.setNull(9, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_2.setLong(9, finalTable.Units_Sold);
							}

							if (finalTable.Unit_Price == null) {
								pstmt_tDBOutput_2.setNull(10, java.sql.Types.DOUBLE);
							} else {
								pstmt_tDBOutput_2.setDouble(10, finalTable.Unit_Price);
							}

							if (finalTable.Unit_Cost == null) {
								pstmt_tDBOutput_2.setNull(11, java.sql.Types.DOUBLE);
							} else {
								pstmt_tDBOutput_2.setDouble(11, finalTable.Unit_Cost);
							}

							if (finalTable.Total_Revenue == null) {
								pstmt_tDBOutput_2.setNull(12, java.sql.Types.DOUBLE);
							} else {
								pstmt_tDBOutput_2.setDouble(12, finalTable.Total_Revenue);
							}

							pstmt_tDBOutput_2.addBatch();
							nb_line_tDBOutput_2++;

							batchSizeCounter_tDBOutput_2++;

							if (!whetherReject_tDBOutput_2) {
								row11 = new row11Struct();
								row11.Region = finalTable.Region;
								row11.Country = finalTable.Country;
								row11.Item_Type = finalTable.Item_Type;
								row11.Sales_Channel = finalTable.Sales_Channel;
								row11.Order_Priority = finalTable.Order_Priority;
								row11.Order_Date = finalTable.Order_Date;
								row11.Order_ID = finalTable.Order_ID;
								row11.Ship_Date = finalTable.Ship_Date;
								row11.Units_Sold = finalTable.Units_Sold;
								row11.Unit_Price = finalTable.Unit_Price;
								row11.Unit_Cost = finalTable.Unit_Cost;
								row11.Total_Revenue = finalTable.Total_Revenue;
							}
							if ((batchSize_tDBOutput_2 > 0)
									&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
								try {
									int countSum_tDBOutput_2 = 0;

									for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
									}
									rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									batchSizeCounter_tDBOutput_2 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
									globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
									java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
											sqle_tDBOutput_2 = null;
									String errormessage_tDBOutput_2;
									if (ne_tDBOutput_2 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_2 = new java.sql.SQLException(
												e_tDBOutput_2.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_2.getMessage(),
												ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
												ne_tDBOutput_2);
										errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
									} else {
										errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
									}

									int countSum_tDBOutput_2 = 0;
									for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
									}
									rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									System.err.println(errormessage_tDBOutput_2);

								}
							}

							tos_count_tDBOutput_2++;

							/**
							 * [tDBOutput_2 main ] stop
							 */

							/**
							 * [tDBOutput_2 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_begin ] stop
							 */
// Start of branch "row11"
							if (row11 != null) {

								/**
								 * [tFileOutputDelimited_5 main ] start
								 */

								currentComponent = "tFileOutputDelimited_5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row11"

									);
								}

								StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
								if (row11.Region != null) {
									sb_tFileOutputDelimited_5.append(row11.Region);
								}
								sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row11.Country != null) {
									sb_tFileOutputDelimited_5.append(row11.Country);
								}
								sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row11.Item_Type != null) {
									sb_tFileOutputDelimited_5.append(row11.Item_Type);
								}
								sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row11.Sales_Channel != null) {
									sb_tFileOutputDelimited_5.append(row11.Sales_Channel);
								}
								sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row11.Order_Priority != null) {
									sb_tFileOutputDelimited_5.append(row11.Order_Priority);
								}
								sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row11.Order_Date != null) {
									sb_tFileOutputDelimited_5
											.append(FormatterUtils.format_Date(row11.Order_Date, "dd-MM-yyyy"));
								}
								sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row11.Order_ID != null) {
									sb_tFileOutputDelimited_5.append(row11.Order_ID);
								}
								sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row11.Ship_Date != null) {
									sb_tFileOutputDelimited_5
											.append(FormatterUtils.format_Date(row11.Ship_Date, "dd-MM-yyyy"));
								}
								sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row11.Units_Sold != null) {
									sb_tFileOutputDelimited_5.append(row11.Units_Sold);
								}
								sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row11.Unit_Price != null) {
									sb_tFileOutputDelimited_5.append(row11.Unit_Price);
								}
								sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row11.Unit_Cost != null) {
									sb_tFileOutputDelimited_5.append(row11.Unit_Cost);
								}
								sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row11.Total_Revenue != null) {
									sb_tFileOutputDelimited_5.append(row11.Total_Revenue);
								}
								sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);

								nb_line_tFileOutputDelimited_5++;
								resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

								outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());

								tos_count_tFileOutputDelimited_5++;

								/**
								 * [tFileOutputDelimited_5 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_5 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_5";

								/**
								 * [tFileOutputDelimited_5 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_5 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_5";

								/**
								 * [tFileOutputDelimited_5 process_data_end ] stop
								 */

							} // End of branch "row11"

							/**
							 * [tDBOutput_2 process_data_end ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_end ] stop
							 */

						} // End of branch "finalTable"

						/**
						 * [tMap_4 process_data_end ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_end ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row7"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							top3countries = null;

// # Output table : 'top3countries'
// # Filter conditions 
							if (

							row7.Ship_Date.after(TalendDate.parseDate("dd/MM/yyyy", "01/05/2015"))
									&& row7.Ship_Date.before(TalendDate.parseDate("dd/MM/yyyy", "01/12/2019"))

							) {
								top3countries_tmp.Region = row7.Region;
								top3countries_tmp.Country = row7.Country;
								top3countries_tmp.Item_Type = row7.Item_Type;
								top3countries_tmp.Sales_Channel = row7.Sales_Channel;
								top3countries_tmp.Order_Priority = row7.Order_Priority;
								top3countries_tmp.Order_Date = row7.Order_Date;
								top3countries_tmp.Order_ID = row7.Order_ID;
								top3countries_tmp.Ship_Date = row7.Ship_Date;
								top3countries_tmp.Units_Sold = row7.Units_Sold;
								top3countries_tmp.Unit_Price = row7.Unit_Price;
								top3countries_tmp.Unit_Cost = row7.Unit_Cost;
								top3countries = top3countries_tmp;
							} // closing filter/reject
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */

						/**
						 * [tMap_3 process_data_begin ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_begin ] stop
						 */
// Start of branch "top3countries"
						if (top3countries != null) {

							/**
							 * [tAggregateRow_1_AGGOUT main ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "top3countries"

								);
							}

							operation_finder_tAggregateRow_1.Country = top3countries.Country;

							operation_finder_tAggregateRow_1.hashCodeDirty = true;

							operation_result_tAggregateRow_1 = hash_tAggregateRow_1
									.get(operation_finder_tAggregateRow_1);

							if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

								operation_result_tAggregateRow_1.Country = operation_finder_tAggregateRow_1.Country;

								hash_tAggregateRow_1.put(operation_result_tAggregateRow_1,
										operation_result_tAggregateRow_1);

							} // G_OutMain_AggR_001

							if (operation_result_tAggregateRow_1.Units_Sold_sum == null) {
								operation_result_tAggregateRow_1.Units_Sold_sum = (long) 0;
							}

							if (top3countries.Units_Sold != null)
								operation_result_tAggregateRow_1.Units_Sold_sum += top3countries.Units_Sold;

							tos_count_tAggregateRow_1_AGGOUT++;

							/**
							 * [tAggregateRow_1_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] stop
							 */

						} // End of branch "top3countries"

						/**
						 * [tMap_3 process_data_end ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_end ] stop
						 */

						/**
						 * [tReplicate_1 process_data_end ] start
						 */

						currentComponent = "tReplicate_1";

						/**
						 * [tReplicate_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE", nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tFilterRow_3 end ] start
				 */

				currentComponent = "tFilterRow_3";

				globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tFilterRow_3", true);
				end_Hash.put("tFilterRow_3", System.currentTimeMillis());

				/**
				 * [tFilterRow_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "orderedinRange");
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
					globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
					java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(), sqle_tDBOutput_2 = null;
					String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(
								e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(),
								ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					} else {
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(errormessage_tDBOutput_2);

				}

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "finalTable");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 end ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (outtFileOutputDelimited_5 != null) {
					outtFileOutputDelimited_5.flush();
					outtFileOutputDelimited_5.close();
				}

				globalMap.put("tFileOutputDelimited_5_NB_LINE", nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);

				resourceMap.put("finish_tFileOutputDelimited_5", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "top3countries");
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortOut", false);
				start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tSortRow_1_SortOut = 0;

				class Comparablerow13Struct extends row13Struct implements Comparable<Comparablerow13Struct> {

					public int compareTo(Comparablerow13Struct other) {

						if (this.Units_Sold == null && other.Units_Sold != null) {
							return 1;

						} else if (this.Units_Sold != null && other.Units_Sold == null) {
							return -1;

						} else if (this.Units_Sold != null && other.Units_Sold != null) {
							if (!this.Units_Sold.equals(other.Units_Sold)) {
								return other.Units_Sold.compareTo(this.Units_Sold);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow13Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow13Struct>();

				/**
				 * [tSortRow_1_SortOut begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row13.Country = aggregated_row_tAggregateRow_1.Country;
					row13.Units_Sold = aggregated_row_tAggregateRow_1.Units_Sold_sum;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tSortRow_1_SortOut main ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortOut";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row13"

						);
					}

					Comparablerow13Struct arrayRowtSortRow_1_SortOut = new Comparablerow13Struct();

					arrayRowtSortRow_1_SortOut.Region = row13.Region;
					arrayRowtSortRow_1_SortOut.Country = row13.Country;
					arrayRowtSortRow_1_SortOut.Item_Type = row13.Item_Type;
					arrayRowtSortRow_1_SortOut.Sales_Channel = row13.Sales_Channel;
					arrayRowtSortRow_1_SortOut.Order_Priority = row13.Order_Priority;
					arrayRowtSortRow_1_SortOut.Order_Date = row13.Order_Date;
					arrayRowtSortRow_1_SortOut.Order_ID = row13.Order_ID;
					arrayRowtSortRow_1_SortOut.Ship_Date = row13.Ship_Date;
					arrayRowtSortRow_1_SortOut.Units_Sold = row13.Units_Sold;
					arrayRowtSortRow_1_SortOut.Unit_Price = row13.Unit_Price;
					arrayRowtSortRow_1_SortOut.Unit_Cost = row13.Unit_Cost;
					list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

					tos_count_tSortRow_1_SortOut++;

					/**
					 * [tSortRow_1_SortOut main ] stop
					 */

					/**
					 * [tSortRow_1_SortOut process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortOut";

					/**
					 * [tSortRow_1_SortOut process_data_begin ] stop
					 */

					/**
					 * [tSortRow_1_SortOut process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortOut";

					/**
					 * [tSortRow_1_SortOut process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				row13Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow13Struct[0]);

				java.util.Arrays.sort(array_tSortRow_1_SortOut);

				globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tSortRow_1_SortOut", true);
				end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:/Users/labyadav/Desktop/HU IE/Week4/Assignment2/output4.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("Region");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Country");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Item_Type");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_Channel");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Order_Priority");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Order_Date");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Order_ID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Ship_Date");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Units_Sold");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Unit_Price");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Unit_Cost");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tSortRow_1_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortIn", false);
				start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				int tos_count_tSortRow_1_SortIn = 0;

				row13Struct[] array_tSortRow_1_SortIn = (row13Struct[]) globalMap.remove("tSortRow_1");

				int nb_line_tSortRow_1_SortIn = 0;

				row13Struct current_tSortRow_1_SortIn = null;

				for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
					current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
					row14.Region = current_tSortRow_1_SortIn.Region;
					row14.Country = current_tSortRow_1_SortIn.Country;
					row14.Item_Type = current_tSortRow_1_SortIn.Item_Type;
					row14.Sales_Channel = current_tSortRow_1_SortIn.Sales_Channel;
					row14.Order_Priority = current_tSortRow_1_SortIn.Order_Priority;
					row14.Order_Date = current_tSortRow_1_SortIn.Order_Date;
					row14.Order_ID = current_tSortRow_1_SortIn.Order_ID;
					row14.Ship_Date = current_tSortRow_1_SortIn.Ship_Date;
					row14.Units_Sold = current_tSortRow_1_SortIn.Units_Sold;
					row14.Unit_Price = current_tSortRow_1_SortIn.Unit_Price;
					row14.Unit_Cost = current_tSortRow_1_SortIn.Unit_Cost;
					// increase number of line sorted
					nb_line_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_1_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					tos_count_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn main ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 main ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row14"

						);
					}

					StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
					if (row14.Region != null) {
						sb_tFileOutputDelimited_1.append(row14.Region);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row14.Country != null) {
						sb_tFileOutputDelimited_1.append(row14.Country);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row14.Item_Type != null) {
						sb_tFileOutputDelimited_1.append(row14.Item_Type);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row14.Sales_Channel != null) {
						sb_tFileOutputDelimited_1.append(row14.Sales_Channel);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row14.Order_Priority != null) {
						sb_tFileOutputDelimited_1.append(row14.Order_Priority);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row14.Order_Date != null) {
						sb_tFileOutputDelimited_1.append(FormatterUtils.format_Date(row14.Order_Date, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row14.Order_ID != null) {
						sb_tFileOutputDelimited_1.append(row14.Order_ID);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row14.Ship_Date != null) {
						sb_tFileOutputDelimited_1.append(FormatterUtils.format_Date(row14.Ship_Date, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row14.Units_Sold != null) {
						sb_tFileOutputDelimited_1.append(row14.Units_Sold);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row14.Unit_Price != null) {
						sb_tFileOutputDelimited_1.append(row14.Unit_Price);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row14.Unit_Cost != null) {
						sb_tFileOutputDelimited_1.append(row14.Unit_Cost);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

					nb_line_tFileOutputDelimited_1++;
					resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

					tos_count_tFileOutputDelimited_1++;

					/**
					 * [tFileOutputDelimited_1 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					/**
					 * [tFileOutputDelimited_1 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					/**
					 * [tFileOutputDelimited_1 process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

				}

				globalMap.put("tSortRow_1_SortIn_NB_LINE", nb_line_tSortRow_1_SortIn);

				ok_Hash.put("tSortRow_1_SortIn", true);
				end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortIn end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tFilterRow_3 finally ] start
				 */

				currentComponent = "tFilterRow_3";

				/**
				 * [tFilterRow_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
					if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_2")) != null) {
						pstmtToClose_tDBOutput_2.close();
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (resourceMap.get("finish_tFileOutputDelimited_5") == null) {

					java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_5");
					if (outtFileOutputDelimited_5 != null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}

				}

				/**
				 * [tFileOutputDelimited_5 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tSortRow_1_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				/**
				 * [tSortRow_1_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_1_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				/**
				 * [tSortRow_1_SortIn finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final mini_assign_labh mini_assign_labhClass = new mini_assign_labh();

		int exitCode = mini_assign_labhClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = mini_assign_labh.class.getClassLoader().getResourceAsStream(
					"mini_assignment2/mini_assign_labh_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = mini_assign_labh.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("userName", "id_String");
					if (context.getStringValue("userName") == null) {
						context.userName = null;
					} else {
						context.userName = (String) context.getProperty("userName");
					}
					context.setContextType("password", "id_Password");
					if (context.getStringValue("password") == null) {
						context.password = null;
					} else {
						String pwd_password_value = context.getProperty("password");
						context.password = null;
						if (pwd_password_value != null) {
							if (context_param.containsKey("password")) {// no need to decrypt if it come from program
																		// argument or parent job runtime
								context.password = pwd_password_value;
							} else if (!pwd_password_value.isEmpty()) {
								try {
									context.password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_password_value);
									context.put("password", context.password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("host", "id_String");
					if (context.getStringValue("host") == null) {
						context.host = null;
					} else {
						context.host = (String) context.getProperty("host");
					}
					context.setContextType("port", "id_Integer");
					if (context.getStringValue("port") == null) {
						context.port = null;
					} else {
						try {
							context.port = routines.system.ParserUtils.parseTo_Integer(context.getProperty("port"));
						} catch (NumberFormatException e) {
							System.err.println(String.format("Null value will be used for context parameter %s: %s",
									"port", e.getMessage()));
							context.port = null;
						}
					}
					context.setContextType("dbName", "id_String");
					if (context.getStringValue("dbName") == null) {
						context.dbName = null;
					} else {
						context.dbName = (String) context.getProperty("dbName");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("userName")) {
				context.userName = (String) parentContextMap.get("userName");
			}
			if (parentContextMap.containsKey("password")) {
				context.password = (java.lang.String) parentContextMap.get("password");
			}
			if (parentContextMap.containsKey("host")) {
				context.host = (String) parentContextMap.get("host");
			}
			if (parentContextMap.containsKey("port")) {
				context.port = (Integer) parentContextMap.get("port");
			}
			if (parentContextMap.containsKey("dbName")) {
				context.dbName = (String) parentContextMap.get("dbName");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_1) {
			globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

			e_tDBConnection_1.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : mini_assign_labh");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 401262 characters generated by Talend Open Studio for Data Integration on the
 * May 25, 2022 at 4:15:09 AM IST
 ************************************************************************************************/